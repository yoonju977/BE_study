import pymysql

# 데이터베이스 연결 설정
connection = pymysql.connect(host='localhost',
                             user='root',
                             password='0310',
                             db='airbnb')

try:
    # 커서 생성
    with connection.cursor() as cursor:
        # 새로운 제품 추가
        sql = "INSERT INTO Products (productName, price, stockQuantity) VALUES (%s, %s, %s)"
        cursor.execute(sql, ('Python Book', 29.99, 50))
        connection.commit()

        #고객 목록 조회
        sql = "SELECT * FROM Customers"
        cursor.execute(sql)
        result = cursor.fetchall()
        for row in result:
            print(row)

        #제품 재고 업데이트
        sql = "UPDATE Products SET stockQuantity = stockQuantity - %s WHERE productID = %s"
        cursor.execute(sql, (quantity_sold, product_id))
        connection.commit()
        
        #고객벽 총 주문 금액 계산
        sql = "SELECT customerID, sum(totalAmount) FROM Orders group by customerID"
        cursor.execute(sql)
        result = cursor.fetchall()
        for row in result:
            print(row)

        #고객 이메일 업데이트
        sql = "UPDATE Customers SET email = %s WHERE customerID = %s"
        cursor.execute(sql, (new_email, customerID))
        connection.commit()

        #주문 취소
        sql = "DELETE FROM Orders WHERE orderID=%s"
        cursor.execute(sql, (orderID))
        connection.commit()

        #특정제품검색
        sql = "SELECT * FROM Products where productName=%s"
        cursor.execute(sql,(productName))
        result = cursor.fetchall()
        for row in result:
            print(row)

        #특정 고객의 모든 주문 조회
        sql = "SELECT * FROM Orders where customerID=%s"
        cursor.execute(sql,(customerID))
        result = cursor.fetchall()
        for row in result:
            print(row)

        #가장 많이 주문한 고객 찾기
        sql = "SELECT customerID  FROM Orders group by customerID order by count(*) desc limit 1"
        cursor.execute(sql)
        print(cursor.fetchone()[0])
        
# 결과 받아오기
        #result = cursor.fetchall()
        #print(result)

finally:
    # 데이터베이스 연결 종료
    connection.close()